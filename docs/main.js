/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _javascript_quarto_gamesys_gamesys__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./javascript/quarto/gamesys/gamesys */ \"./src/javascript/quarto/gamesys/gamesys.js\");\n/* harmony import */ var _javascript_quarto_gamesys_gameplayer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./javascript/quarto/gamesys/gameplayer */ \"./src/javascript/quarto/gamesys/gameplayer.js\");\n//import {Piece} from './javascript/quarto/gameobject/piece.js';\r\n//import {Board, HiTechBoard} from './javascript/quarto/gameobject/board.js';\r\n//import {Box} from './javascript/quarto/gameobject/box.js';\r\n//import * as util from \"./javascript/quarto/gameutil/util.js\";\r\n//import {AiBase} from \"./javascript/quarto/ailogic/ai_base.js\";\r\n//import {AiMontecarlo} from \"./javascript/quarto/ailogic/ai_montecarlo.js\";\r\n//import {AiRandom} from \"./javascript/quarto/ailogic/ai_random.js\";\r\n\r\n\r\n\r\n//エレメント取得\r\nconst button_gamestart = document.getElementById('gamestart');\r\nconst div_board = document.getElementById('board');\r\nconst button_enter = document.getElementById('enter');\r\nconst text_command = document.getElementById('command');\r\n\r\nconst player1 = new _javascript_quarto_gamesys_gameplayer__WEBPACK_IMPORTED_MODULE_1__[\"GamePlayer\"]('プレイヤー１');\r\nconst player2 = new _javascript_quarto_gamesys_gameplayer__WEBPACK_IMPORTED_MODULE_1__[\"GamePlayer\"]('プレイヤー２');\r\nconst gamesys = new _javascript_quarto_gamesys_gamesys__WEBPACK_IMPORTED_MODULE_0__[\"GameSys\"](player1, player2);\r\n\r\n//イベント\r\nfunction onclick(ev){\r\n    gamesys.start();\r\n}\r\n\r\nbutton_gamestart.addEventListener('click', onclick);\r\n\r\n/*\r\nfunction gameMain(){\r\n    let sys = new GameSys(new AiMontecarlo(), new AiRandom());\r\n    let phase = 0;\r\n    while(!sys.isGameEnd){\r\n        sys.dispBoard();\r\n        console.log('choicePiece:'+((sys.choicePiece)? sys.choicePiece.toNumList():null));\r\n        console.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━');\r\n        switch(phase){\r\n            case 0:\r\n                sys.firstPhaseChoice();\r\n                break;\r\n            case 1:\r\n                sys.secondPhasePut();\r\n                break;\r\n            case 2:\r\n                sys.secondPhaseChoice();\r\n                break;\r\n            case 3:\r\n                sys.firstPhasePut();\r\n                break;\r\n        }\r\n        phase = (phase+1)%4;\r\n    }\r\n    sys.dispBoard();\r\n    console.log('winner:'+sys.winner);\r\n    console.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━');\r\n}\r\n*/\r\n\r\n//テストコード\r\n/*\r\nfunction testAiRandom(){\r\n    let ai = new AiRandom();\r\n\r\n    let board = new HiTechBoard([]);\r\n    let bo = new Box(null, board);\r\n    \r\n    let rc;\r\n    let rp;\r\n    let call;\r\n    while(1){\r\n        rc = ai.choice(board, bo);\r\n        console.log(rc);\r\n        bo.remove(rc.piece);\r\n        call = rc.call;\r\n        if(call == \"Quarto\") break;\r\n        rp = ai.put(board, rc.piece);\r\n        console.log(rp);\r\n        board.setBoard(rp.left, rp.top, rc.piece);\r\n        call = rp.call ;\r\n        if(call == \"Quarto\") break;\r\n        if(bo.piecelist.length == 0) break;\r\n    }\r\n\r\n    console.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━');\r\n    for(let i=0; i<4; ++i){\r\n        let l = [];\r\n        for(let j=0; j<4; ++j){\r\n            let p = board.onboard[i][j];\r\n            if(p != null){\r\n                p = ''+p.toNumList();\r\n            }else{\r\n                p = \"       \";\r\n            }\r\n            l[j] = p;\r\n        }\r\n        console.log(l);\r\n    }\r\n    console.log(call);\r\n    console.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━');\r\n}\r\n\r\nfunction testUtil(){\r\n    let m = [\r\n        {\"left\":1,\"top\":2,\r\n            \"piece\":{\r\n                \"color\":\"dark\",\r\n                \"shape\":\"circular\",\r\n                \"top\":\"solid\",\r\n                \"height\":\"tall\"\r\n            }//10\r\n        }\r\n    ];\r\n    let p = Piece.getAllPiece();\r\n    let board = new HiTechBoard(m);\r\n    board.setBoard(0,3,p[9]);\r\n    board.setBoard(2,1,p[11]);\r\n    //b.setBoard(3,0,p[12]);\r\n    console.log('util.endPiece:'+util.endPiece(board, p[12]));\r\n    console.log('util.endPiecePos:'+util.endPiecePos(board, p[12]));\r\n    console.log('util.oddsPieces:');\r\n    console.log(util.oddsPieces(board, p));\r\n\r\n    let board2 = new HiTechBoard([]);\r\n    board2.setBoard(0,0,p[0]);\r\n    board2.setBoard(1,0,p[1]);\r\n    board2.setBoard(2,0,p[2]);\r\n\r\n    board2.setBoard(0,1,p[4]);\r\n    board2.setBoard(1,1,p[5]);\r\n    let bo = new Box(null, board2);\r\n    bo.remove(p[6]);\r\n    console.log('util.losePiecePos2:');\r\n    console.log(util.losePiecePos2(board2, bo, p[6]));\r\n}\r\n\r\nfunction testBox(){\r\n    let m = [\r\n        {\"left\":1,\"top\":2,\r\n            \"piece\":{\r\n                \"color\":\"dark\",\r\n                \"shape\":\"circular\",\r\n                \"top\":\"solid\",\r\n                \"height\":\"tall\"\r\n            }//10\r\n        }\r\n    ];\r\n    let p = Piece.getAllPiece();\r\n    let board = new HiTechBoard(m);\r\n    let b = new Box(null, board);\r\n    let b3 = b.clone();\r\n    b3.remove(p[4]);\r\n    console.log(b);\r\n    console.log(b3);\r\n\r\n    let m2 = [{\r\n        \"color\":\"dark\",\r\n        \"shape\":\"circular\",\r\n        \"top\":\"solid\",\r\n        \"height\":\"tall\"\r\n    }];\r\n    let b2 = new Box(m2, null);\r\n    console.log(b2);\r\n\r\n}\r\n\r\nfunction testBoard(){\r\n    let m = [\r\n        {\"left\":1,\"top\":2,\r\n            \"piece\":{\r\n                \"color\":\"dark\",\r\n                \"shape\":\"circular\",\r\n                \"top\":\"solid\",\r\n                \"height\":\"tall\"\r\n            }//10\r\n        }\r\n    ];\r\n    let p = Piece.getAllPiece();\r\n    let b = new HiTechBoard(m);\r\n    b.setBoard(0,3,p[9]);\r\n    b.setBoard(2,1,p[11]);\r\n    let b2 = b.clone();\r\n    b.setBoard(3,0,p[12]);\r\n    b2.setBoard(3,0,p[5]);\r\n    console.log(b);\r\n    console.log(b.isQuarto());\r\n    console.log(b2);\r\n    console.log(b2.isQuarto());\r\n\r\n}\r\n\r\nfunction testPiece(){\r\n    let p = Piece.getAllPiece();\r\n    p[0]=1;\r\n    let p2 = Piece.getAllPiece();\r\n    p[1].param[0]='a';\r\n    \r\n    console.log(p);\r\n    console.log(p2);\r\n}\r\n*/\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ }),

/***/ "./src/javascript/quarto/gameobject/board.js":
/*!***************************************************!*\
  !*** ./src/javascript/quarto/gameobject/board.js ***!
  \***************************************************/
/*! exports provided: Board, HiTechBoard */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Board\", function() { return Board; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HiTechBoard\", function() { return HiTechBoard; });\n/* harmony import */ var _piece_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./piece.js */ \"./src/javascript/quarto/gameobject/piece.js\");\n\r\n\r\nclass Board{\r\n    /*\r\n    ボード上のコマの配置を管理する\r\n    */\r\n    constructor(boardlist=null){\r\n        this.init(boardlist);\r\n    }\r\n\r\n    //初期化\r\n    init(boardlist){\r\n        this.onboard=null\r\n        if(boardlist){\r\n            this.onboard = [\r\n                [null,null,null,null],\r\n                [null,null,null,null],\r\n                [null,null,null,null],\r\n                [null,null,null,null],\r\n            ];\r\n            for(let i=0; i<boardlist.length; ++i){\r\n                let cell = boardlist[i];\r\n                if(cell[\"piece\"]){\r\n                    this.setBoard(\r\n                        cell[\"left\"],\r\n                        cell[\"top\"],\r\n                        _piece_js__WEBPACK_IMPORTED_MODULE_0__[\"Piece\"].getInstance(cell[\"piece\"])\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    setBoard(left, top, piece){\r\n        /*\r\n        指定した座標にコマをセットする\r\n        */\r\n        this.onboard[left][top] = piece;\r\n    }\r\n    getBoard(left, top){\r\n        /*\r\n        指定した座標のコマを取得する\r\n        */\r\n        return this.onboard[left][top];\r\n    }\r\n    \r\n    toList(){\r\n        return this.onboard;\r\n    }\r\n    \r\n    toJsonObject(){\r\n        let obj = [];\r\n        for(let left=0; left<4; ++left){\r\n            for (let top=0; top<4; ++top){\r\n                let p = this.onboard[left][top];\r\n                if(p) p = p.toDict();\r\n                dic = {\r\n                    \"left\":left,\r\n                    \"top\":top,\r\n                    \"piece\":p,\r\n                };\r\n                obj.push(dic);\r\n            }\r\n        }\r\n        return obj\r\n    }\r\n}\r\n\r\n\r\nclass HiTechBoard extends Board{\r\n    \r\n    /*\r\n    Boardの拡張クラス。Board上の情報をさらに整理するための機能を追加する。\r\n    */\r\n\r\n    constructor(boardlist=null){\r\n        //コンストラクタでスーパークラスのコンストラクタより前に自身の初期化ができない(thisが使えない)ため、\r\n        //初期化処理をinitメソッドに外出しした。\r\n        super(boardlist);\r\n    }\r\n\r\n    //Boardのinitメソッドをオーバーライドする。\r\n    //Boardのコンストラクタからこのメソッドを呼んでもらう\r\n    init(boardlist){\r\n        this.countPiecesNum = 0;    //おいてあるコマの数\r\n        this.line_info = null;\r\n        \r\n        if(boardlist){\r\n            this.line_info = new Array(10);\r\n            for(let i=0; i<10; ++i){\r\n                this.line_info[i] = [0,0,0,0];\r\n            }\r\n        }\r\n\r\n        super.init(boardlist);  //\r\n        \r\n        /*\r\n        line_infoに関する備考\r\n        line_info[0]：列1 条件：top == 0\r\n        line_info[1]：列2 条件：top == 1\r\n        line_info[2]：列3 条件：top == 2\r\n        line_info[3]：列4 条件：top == 3\r\n        line_info[4]：行1 条件：left == 0\r\n        line_info[5]：行2 条件：left == 1\r\n        line_info[6]：行3 条件：left == 2\r\n        line_info[7]：行4 条件：left == 3\r\n        line_info[8]：斜1 条件：left == top\r\n        line_info[9]：斜2 条件：left + top == 3\r\n        \r\n        LEFT \\ TOP\r\n        斜1 列1 列2 列3 列4 斜2\r\n        　 ━━━━━━━━━\r\n        行1│　 │　 │　 │　 │\r\n        　 ━━━━━━━━━\r\n        行2│　 │　 │　 │　 │\r\n        　 ━━━━━━━━━\r\n        行3│　 │　 │　 │　 │\r\n        　 ━━━━━━━━━\r\n        行4│　 │　 │　 │　 │\r\n        　 ━━━━━━━━━\r\n        */\r\n    }\r\n\r\n    setBoard(left, top, piece){\r\n        /*\r\n        セットの機能拡張\r\n        ライン毎のリーチ状況を更新\r\n        */\r\n        super.setBoard(left,top,piece);\r\n        if (piece){\r\n            let col_index = top;     //列のインデックス\r\n            let row_index = left+4;  //行のインデックス\r\n\r\n            addList(this.line_info[col_index], piece.param);\r\n            addList(this.line_info[row_index], piece.param);\r\n            \r\n            //斜1の判定\r\n            if (left == top)\r\n                addList(this.line_info[8], piece.param);\r\n\r\n            //斜2の判定\r\n            if (left + top == 3)\r\n                addList(this.line_info[9], piece.param);\r\n        }\r\n        ++this.countPiecesNum;  //コマの数をカウントアップ\r\n    }\r\n\r\n    //クアルト宣言できるかどうか\r\n    isQuarto(){\r\n        /*\r\n        ボードが現在クアルトできるか\r\n        */\r\n        //absoluteで配列の絶対値を取得\r\n        //whereで4となっている要素のインデックスを取得\r\n        //lenでそのサイズを測って件数を調べる\r\n        for(let i=0; i<10; ++i){\r\n            for(let j=0; j<4; ++j){\r\n                let n = this.line_info[i][j];\r\n                if(Math.abs(n) == 4)    return true;\r\n            }\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n    //リーチかどうか\r\n    isRiichi(){\r\n        for(let i=0; i<10; ++i){\r\n            for(let j=0; j<4; ++j){\r\n                let n = this.line_info[i][j];\r\n                if(Math.abs(n) == 3)    return true;\r\n            }\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n    //ブランクになっている箇所を取得する。\r\n    getIsBlankList(){\r\n        let checkpos = [new Array(4),new Array(4),new Array(4),new Array(4)];\r\n        for(let i=0;i<4;++i){\r\n            for(let j=0; j<4; ++j){\r\n                checkpos[i][j] = this.onboard[i][j] == null;\r\n            }\r\n        }\r\n        return checkpos;\r\n    }\r\n\r\n    //おいてあるコマの数\r\n    getPiecesNum(){\r\n        return this.countPiecesNum;\r\n    }\r\n    \r\n    clone(){\r\n        let cobj = new HiTechBoard();\r\n\r\n        //onboard内のPieceクラスのコピーを作成しないようにシャローコピーをする\r\n        cobj.onboard = new Array(4);\r\n        for(let i=0; i<4; ++i){\r\n            cobj.onboard[i] = new Array(4);\r\n            for(let j=0; j<4; ++j){\r\n                cobj.onboard[i][j] = this.onboard[i][j];\r\n            }\r\n        }\r\n\r\n        //line_infoはすべてコピーされていいため、ディープコピーをする\r\n        cobj.line_info = new Array(10);\r\n        for(let i=0; i<10; ++i){\r\n            cobj.line_info[i] = new Array(4);\r\n            for(let j=0; j<4; ++j){\r\n                cobj.line_info[i][j] = this.line_info[i][j];\r\n            }\r\n        }\r\n\r\n        //コマの数をコピー\r\n        cobj.countPiecesNum = this.countPiecesNum;\r\n\r\n        return cobj\r\n    }\r\n}\r\n\r\n//リスト内の値を加算する。\r\nfunction addList(l1, l2){\r\n\r\n    for(let i=0; i<l1.length; ++i){\r\n        l1[i] += l2[i];\r\n    }\r\n}\r\n            \r\n\r\n        \r\n\n\n//# sourceURL=webpack:///./src/javascript/quarto/gameobject/board.js?");

/***/ }),

/***/ "./src/javascript/quarto/gameobject/box.js":
/*!*************************************************!*\
  !*** ./src/javascript/quarto/gameobject/box.js ***!
  \*************************************************/
/*! exports provided: Box */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Box\", function() { return Box; });\n/* harmony import */ var _piece_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./piece.js */ \"./src/javascript/quarto/gameobject/piece.js\");\n\r\n\r\nclass Box{\r\n    constructor(boxlist=null, board=null){\r\n        this.piecelist = null;\r\n        if(boxlist){\r\n            let tlist = [];\r\n            for(let i=0; i<boxlist.length; ++i){\r\n                let piecedict = boxlist[i];\r\n                let p = _piece_js__WEBPACK_IMPORTED_MODULE_0__[\"Piece\"].getInstance(piecedict);\r\n                tlist.push(p);\r\n            }\r\n            this.piecelist = tlist;\r\n        }\r\n                \r\n        if(board){\r\n            this.piecelist = _piece_js__WEBPACK_IMPORTED_MODULE_0__[\"Piece\"].getAllPiece();\r\n            for(let i=0; i<4; ++i){\r\n                for(let j=0; j<4; ++j){\r\n                    let bp = board.onboard[i][j];\r\n                    if(bp){\r\n                        this.remove(bp);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n            \r\n    clone(){\r\n        let cobj = new Box();\r\n\r\n        //piecelist内のPieceクラスのコピーを作成しないようにシャローコピーをする\r\n        //cobj.piecelist = this.piecelist.copy()\r\n        cobj.piecelist = this.piecelist.slice();\r\n\r\n        return cobj\r\n    }\r\n\r\n    remove(p){\r\n        //nw = np.where(this.piecelist == piece)\r\n        //this.piecelist = np.delete(this.piecelist,nw)\r\n        for(let i=0; i<this.piecelist.length; ++i){\r\n            if(this.piecelist[i] == p){\r\n                this.piecelist.splice(i,1);\r\n            }\r\n        }\r\n    }\r\n    \r\n    toJsonObject(){\r\n        let obj = [];\r\n        for(let i=0; i<this.piecelist.length; ++i){\r\n            let P = this.piecelist[i];\r\n            obj.push(p.toDict());\r\n        }\r\n        return obj\r\n    }\r\n\r\n    isEmpty(){\r\n        return (this.piecelist.length == 0);\r\n    }\r\n}\n\n//# sourceURL=webpack:///./src/javascript/quarto/gameobject/box.js?");

/***/ }),

/***/ "./src/javascript/quarto/gameobject/piece.js":
/*!***************************************************!*\
  !*** ./src/javascript/quarto/gameobject/piece.js ***!
  \***************************************************/
/*! exports provided: Piece */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Piece\", function() { return Piece; });\nclass Piece{\r\n    constructor(color, shape, top, height){\r\n        //色,形,穴,高さ\r\n        this.param = [color,shape,top,height];\r\n        \r\n        //文字列で格納された値を0,1に変換する\r\n        let c   = (color  == 1)? 1:0;\r\n        let s   = (shape  == 1)? 1:0;\r\n        let t   = (top    == 1)? 1:0;\r\n        let h   = (height == 1)? 1:0;\r\n\r\n        //0,1からインデックスを作成する\r\n        this.index = (c<<0) + (s<<1) + (t<<2) + (h<<3);\r\n    }\r\n    \r\n    toDict(){\r\n        let c = (this.param[0]  == 1)? \"light\"    : \"dark\";\r\n        let s = (this.param[1]  == 1)? \"circular\" : \"square\";\r\n        let t = (this.param[2]  == 1)? \"hollow\"   : \"solid\";\r\n        let h = (this.param[3]  == 1)? \"tall\"     : \"short\";\r\n        return {\r\n            'color':c,\r\n            'shape':s,\r\n            'top':t,\r\n            'height':h,\r\n        };\r\n    }\r\n\r\n    toNumList(){\r\n        //return np.where(this.param==1,1,2);\r\n        let res = new Array(4);\r\n        for(let i=0; i<4; ++i){\r\n            res[i] = (this.param[i]==1)? 1:2;\r\n        }\r\n        return res;\r\n    }\r\n    \r\n    static getInstance(pieceDict){\r\n        //文字列で格納された値を0,1に変換する\r\n        let c   = (pieceDict['color']  == \"light\"   )? 1:0;\r\n        let s   = (pieceDict['shape']  == \"circular\")? 1:0;\r\n        let t   = (pieceDict['top']    == \"hollow\"  )? 1:0;\r\n        let h   = (pieceDict['height'] == \"tall\"    )? 1:0;\r\n\r\n        //0,1からインデックスを作成する\r\n        let index = (c<<0) + (s<<1) + (t<<2) + (h<<3);\r\n        return __piece_list__[index];\r\n    }\r\n    \r\n    static getAllPiece(){\r\n        return __piece_list__.slice();  //シャローコピー\r\n    }\r\n}\r\n\r\nconst __piece_list__ = [\r\n    new Piece(-1,-1,-1,-1), //0\r\n    new Piece( 1,-1,-1,-1), //1\r\n    new Piece(-1, 1,-1,-1), //2\r\n    new Piece( 1, 1,-1,-1), //3\r\n    new Piece(-1,-1, 1,-1), //4\r\n    new Piece( 1,-1, 1,-1), //5\r\n    new Piece(-1, 1, 1,-1), //6\r\n    new Piece( 1, 1, 1,-1), //7\r\n    new Piece(-1,-1,-1, 1), //8\r\n    new Piece( 1,-1,-1, 1), //9\r\n    new Piece(-1, 1,-1, 1), //10\r\n    new Piece( 1, 1,-1, 1), //11\r\n    new Piece(-1,-1, 1, 1), //12\r\n    new Piece( 1,-1, 1, 1), //13\r\n    new Piece(-1, 1, 1, 1), //14\r\n    new Piece( 1, 1, 1, 1), //15\r\n];\r\n\n\n//# sourceURL=webpack:///./src/javascript/quarto/gameobject/piece.js?");

/***/ }),

/***/ "./src/javascript/quarto/gamesys/gameplayer.js":
/*!*****************************************************!*\
  !*** ./src/javascript/quarto/gamesys/gameplayer.js ***!
  \*****************************************************/
/*! exports provided: GamePlayer, AIPlayer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GamePlayer\", function() { return GamePlayer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AIPlayer\", function() { return AIPlayer; });\n/* harmony import */ var _gamesys__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gamesys */ \"./src/javascript/quarto/gamesys/gamesys.js\");\n\r\n\r\n/**プレイヤークラス */\r\nclass GamePlayer{\r\n\r\n    /**\r\n     * @param {GameSys} gamesys \r\n     * @param {number} playerno \r\n     */\r\n    constructor(name){\r\n        this.name = name;\r\n    }\r\n\r\n    setGamesys(gamesys){\r\n        this.gamesys = gamesys;\r\n    }\r\n\r\n    setPlayerNo(playerno){\r\n        this.playerno = playerno;\r\n    }\r\n\r\n    /** */\r\n    actionChoice(piece, call){\r\n        let nowPhase = this.gamesys.nowPhase();\r\n        if(nowPhase instanceof PhaseChoice \r\n            && nowPhase.playerno == this.playerno){\r\n            nowPhase.setParam(piece, call);\r\n            nowPhase.action();\r\n        }\r\n    }\r\n\r\n    /** */\r\n    actionPut(left, top, call){\r\n        let nowPhase = this.gamesys.nowPhase();\r\n        if(nowPhase instanceof PhasePut\r\n            && nowPhase.playerno == this.playerno){\r\n            nowPhase.setParam(left, top, call);\r\n            nowPhase.action();\r\n        }\r\n    }\r\n}\r\n\r\nclass AIPlayer extends GamePlayer{\r\n    /**\r\n     * @param {string} aiName \r\n     */\r\n    constructor(aiName){\r\n        this.aiName = aiName;\r\n        this.choiceWorker = new Worker(\"./worker/choice.js\");\r\n        this.putWorker = new Worker(\"./worker/put.js\");\r\n        this.choiceWorker.onmessage = (e)=>{\r\n            let piece = e.data[0];\r\n            let call = e.data[1];\r\n            this.actionChoice(piece, call);\r\n        };\r\n        this.putWorker.onmessage = (e)=>{\r\n            let left = e.data[0];\r\n            let top = e.data[1];\r\n            let call = e.data[2];\r\n            this.actionPut(left, top, call);\r\n        };\r\n\r\n    }\r\n\r\n    /** */\r\n    runAiChoice(){\r\n        this.choiceWorker.postMessage({\r\n            aiName:this.aiName, //AIクラスのインスタンスが直接渡せないので名前を渡す。\r\n        });\r\n    }\r\n\r\n    /** */\r\n    runAiPut(){\r\n        this.putWorker.postMessage({\r\n            aiName:this.aiName, //AIクラスのインスタンスが直接渡せないので名前を渡す。\r\n        });\r\n    }\r\n}\r\n\r\n\n\n//# sourceURL=webpack:///./src/javascript/quarto/gamesys/gameplayer.js?");

/***/ }),

/***/ "./src/javascript/quarto/gamesys/gamesys.js":
/*!**************************************************!*\
  !*** ./src/javascript/quarto/gamesys/gamesys.js ***!
  \**************************************************/
/*! exports provided: GameSys */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GameSys\", function() { return GameSys; });\n/* harmony import */ var _gameobject_board_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../gameobject/board.js */ \"./src/javascript/quarto/gameobject/board.js\");\n/* harmony import */ var _gameobject_box_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../gameobject/box.js */ \"./src/javascript/quarto/gameobject/box.js\");\n/* harmony import */ var _gameplayer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./gameplayer */ \"./src/javascript/quarto/gamesys/gameplayer.js\");\n\r\n\r\n\r\n\r\nclass GameSys{\r\n    \r\n    //コンストラクタ\r\n    constructor(player0, player1){\r\n        this.setPlayer(player0, player1);\r\n        this.phases = [\r\n            new PhaseChoice(this, player0.playerno),\r\n            new PhasePut(this, player1.playerno),\r\n            new PhaseChoice(this, player1.playerno),\r\n            new PhasePut(this, player0.playerno),\r\n        ];\r\n    }\r\n\r\n    start(){\r\n        this.board = new _gameobject_board_js__WEBPACK_IMPORTED_MODULE_0__[\"HiTechBoard\"]([]);\r\n        this.box = new _gameobject_box_js__WEBPACK_IMPORTED_MODULE_1__[\"Box\"](null, this.board);\r\n        this.choicePiece = null;\r\n        this.isGameEnd = false;\r\n        this.winner = null; //先攻が勝ったときは1, 後攻が勝ったときは2\r\n        this.phasecount = 0;\r\n\r\n        //AI実行\r\n        this.disp();\r\n        this.nowPhase().runAi();\r\n    }\r\n\r\n    nowPhase(){\r\n        return this.phases[this.phasecount];\r\n    }\r\n\r\n    nowPlayerNo(){\r\n        return this.phases[this.phasecount].playerno;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {GamePlayer} player0\r\n     * @param {GamePlayer} player1\r\n     */\r\n    setPlayer(player0, player1){\r\n        this.players = [];\r\n        player0.setGamesys(this);\r\n        player0.setPlayerNo(0);\r\n        player1.setGamesys(this);\r\n        player1.setPlayerNo(1);\r\n        this.players.push(player0);\r\n        this.players.push(player1);\r\n    }\r\n\r\n    choice(piece, call){\r\n        if(this.isGameEnd)  return; //ゲームが終わっている場合は受け付けない\r\n\r\n        //現在のフェーズおよびプレイヤーで無いときは受け付けない。\r\n        //if(this.nowPhase != 'choice' || this.nowTurn != playerno) return;\r\n        \r\n        //クアルト宣言処理\r\n        if(this.checkQuarto(call))  return;  //ゲームが終わる場合は終了\r\n\r\n        //選択したコマを確保\r\n        this.choicePiece = piece;\r\n        this.box.remove(this.choicePiece);\r\n\r\n    }\r\n\r\n    put(left, top, call){\r\n        if(this.isGameEnd)  return; //ゲームが終わっている場合は受け付けない\r\n\r\n        //現在のフェーズおよびプレイヤーで無いときは受け付けない。\r\n        //if(this.nowPhase != 'put' || this.nowTurn != playerno) return;\r\n        \r\n        //コマをボードに置く\r\n        this.board.setBoard(left, top, this.choicePiece);\r\n        this.choicePiece = null;\r\n        \r\n        //クアルト宣言処理\r\n        if(this.checkQuarto(call))  return;  //ゲームが終わる場合は終了\r\n        if(this.checkBox())  return;\r\n\r\n    }\r\n\r\n    checkQuarto(call){\r\n        if(call == \"Quarto\"){\r\n            let playerno = this.nowPhase().playerno;\r\n            //クアルト宣言があったら終了処理\r\n            if(this.board.isQuarto()){\r\n                this.winner = playerno; //正しく宣言できていたらそのプレイヤーの勝ち\r\n            }else{\r\n                this.winner = 1-playerno; //誤った宣言の場合はもう一方のプレイヤーの勝ち\r\n            }\r\n\r\n            //ゲーム終了フラグON\r\n            this.isGameEnd = true;\r\n        }\r\n        return this.isGameEnd;\r\n    }\r\n\r\n    checkBox(){\r\n        if(this.box.isEmpty()){\r\n            this.isGameEnd = true;\r\n        }\r\n        return this.isGameEnd;\r\n    }\r\n\r\n    disp(){\r\n        this.dispBoard();\r\n        console.log('choicePiece:'+((this.choicePiece)? this.choicePiece.toNumList():null));\r\n        console.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━');\r\n    }\r\n\r\n    gameover(){\r\n        console.log('winner:'+this.players[this.winner].name);\r\n        console.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━');\r\n    }\r\n\r\n    nextPhase(){\r\n        if(this.isGameEnd){\r\n            this.gameover();\r\n            return;\r\n        }  \r\n\r\n        //フェーズカウントを進める。\r\n        this.phasecount = (this.phasecount+1) % this.phases.length;\r\n        \r\n        //AIの実行\r\n        this.nowPhase().runAi();\r\n    }\r\n\r\n    dispBoard(){\r\n        for(let i=0; i<4; ++i){\r\n            let l = [];\r\n            for(let j=0; j<4; ++j){\r\n                let p = this.board.onboard[i][j];\r\n                if(p != null){\r\n                    p = ''+p.toNumList();\r\n                }else{\r\n                    p = \"       \";\r\n                }\r\n                l[j] = p;\r\n            }\r\n            console.log(l);\r\n        }\r\n    }\r\n}\r\n\r\nclass Phase{\r\n    constructor(gamesys, playerno){\r\n        this.gamesys = gamesys;\r\n        this.playerno = playerno;\r\n    }\r\n}\r\n\r\nclass PhaseChoice extends Phase{\r\n    runAi(){\r\n        let player = this.gamesys.players[this.playerno];\r\n        if(player instanceof _gameplayer__WEBPACK_IMPORTED_MODULE_2__[\"AIPlayer\"]){\r\n            player.runAiChoice();\r\n        }\r\n    }\r\n    setParam(piece, call){\r\n        this.piece = piece;\r\n        this.call = call;\r\n    }\r\n    action(){\r\n        this.gamesys.choice(this.playerno, this.piece, this.call);\r\n        this.gamesys.disp();\r\n        this.gamesys.nextPhase();\r\n    }\r\n}\r\n\r\nclass PhasePut extends Phase{\r\n    runAi(){\r\n        let player = this.gamesys.players[this.playerno];\r\n        if(player instanceof _gameplayer__WEBPACK_IMPORTED_MODULE_2__[\"AIPlayer\"]){\r\n            player.runAiPut();\r\n        }\r\n    }\r\n    setParam(left, top, call){\r\n        this.left = left;\r\n        this.top = top;\r\n        this.call = call;\r\n    }\r\n    action(){\r\n        this.gamesys.put(this.playerno, this.left, this.top, call);\r\n        this.gamesys.disp();\r\n        this.gamesys.nextPhase();\r\n    }\r\n}\r\n\r\n/*\r\nexport class GameSys{\r\n\r\n    //コンストラクタ\r\n    constructor(p1, p2){\r\n        this.board = new HiTechBoard([]);\r\n        this.box = new Box(null, this.board);\r\n        this.choicePiece = null;\r\n        this.isGameEnd = false;\r\n        this.winner = null; //先攻が勝ったときは1, 後攻が勝ったときは2\r\n    }\r\n\r\n    firstPhaseChoice(){\r\n        let result = this.phaseChoice(this.firstPlayer);\r\n        this.checkEnd(1, result);\r\n    }\r\n\r\n    firstPhasePut(){\r\n        let result = this.phasePut(this.firstPlayer);\r\n        this.checkEnd(1, result);\r\n    }\r\n\r\n    secondPhaseChoice(){\r\n        let result = this.phaseChoice(this.secondPlayer);\r\n        this.checkEnd(2, result);\r\n    }\r\n\r\n    secondPhasePut(){\r\n        let result = this.phasePut(this.secondPlayer);\r\n        this.checkEnd(2, result);\r\n    }\r\n\r\n    checkEnd(p, result){\r\n        //ゲーム終了フラグ\r\n        this.isGameEnd = (result != null);\r\n        \r\n        //勝者\r\n        if(result == \"winner\"){ //勝利\r\n            this.winner = p;\r\n        }else if(result == \"loser\"){ //負け\r\n            this.winner = 3 - p;\r\n        }else if(result == \"draw\"){ //引き分け\r\n\r\n        }\r\n    }\r\n\r\n    //コマ選択フェーズ\r\n    //引数：操作するプレイヤー\r\n    //戻り値：\"winner\"   そのプレイヤーの勝ち\r\n    //       \"loser\"    そのプレイヤーの負け\r\n    //       null       ゲーム続行\r\n    phaseChoice(player){\r\n        //プレイ\r\n        let result = player.choice(this.board, this.box);\r\n        \r\n        //クアルト宣言処理\r\n        if(result.call == \"Quarto\"){\r\n            return (this.board.isQuarto())? \"winner\":\"loser\";\r\n        }\r\n\r\n        //選択したコマを確保\r\n        this.choicePiece = result.piece;\r\n        this.box.remove(this.choicePiece);\r\n\r\n        //続行\r\n        return null;\r\n    }\r\n\r\n    phaseChoice(piece, call){\r\n        \r\n        //クアルト宣言処理\r\n        if(call == \"Quarto\"){\r\n            return (this.board.isQuarto())? \"winner\":\"loser\";\r\n        }\r\n\r\n        //選択したコマを確保\r\n        this.choicePiece = piece;\r\n        this.box.remove(this.choicePiece);\r\n\r\n        //続行\r\n        return null;\r\n    }\r\n\r\n    //コマ置くフェーズ\r\n    //引数：操作するプレイヤー\r\n    //戻り値：\"winner\"   そのプレイヤーの勝ち\r\n    //       \"loser\"    そのプレイヤーの負け\r\n    //       \"draw\"     引き分け\r\n    //       null       ゲーム続行\r\n    phasePut(player){\r\n        //プレイ\r\n        let result =  player.put(this.board, this.choicePiece);\r\n        \r\n        //コマをボードに置く\r\n        this.board.setBoard(result.left, result.top, this.choicePiece);\r\n        this.choicePiece = null;\r\n\r\n        //クアルト宣言処理\r\n        if(result.call == \"Quarto\"){\r\n            return (this.board.isQuarto())? \"winner\":\"loser\";\r\n        }\r\n\r\n        //ボックスが空なら引き分け\r\n        if(this.box.isEmpty()) return \"draw\";\r\n\r\n        //続行\r\n        return null;\r\n    }\r\n\r\n    dispBoard(){\r\n        for(let i=0; i<4; ++i){\r\n            let l = [];\r\n            for(let j=0; j<4; ++j){\r\n                let p = this.board.onboard[i][j];\r\n                if(p != null){\r\n                    p = ''+p.toNumList();\r\n                }else{\r\n                    p = \"       \";\r\n                }\r\n                l[j] = p;\r\n            }\r\n            console.log(l);\r\n        }\r\n    }\r\n}\r\n*/\n\n//# sourceURL=webpack:///./src/javascript/quarto/gamesys/gamesys.js?");

/***/ })

/******/ });